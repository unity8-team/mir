Description: enabled nested Mir-on-Mir servers
Author: Rober Carr <rober.carr@canonical.com>

--- a/src/platform/graphics/mesa/native_platform.cpp
+++ b/src/platform/graphics/mesa/native_platform.cpp
@@ -25,6 +25,9 @@
 #include "mir/graphics/platform_ipc_package.h"
 #include "mir/graphics/nested_context.h"
 
+#include "internal_client.h"
+#include "internal_native_display.h"
+
 #include <boost/exception/errinfo_errno.hpp>
 #include <boost/throw_exception.hpp>
 #include <stdexcept>
@@ -32,9 +35,15 @@
 namespace mg = mir::graphics;
 namespace mgm = mg::mesa;
 
+std::shared_ptr<mgm::InternalNativeDisplay> mgm::NativePlatform::internal_native_display;
+bool mgm::NativePlatform::internal_display_clients_present = false;
+
 void mgm::NativePlatform::initialize(
     std::shared_ptr<NestedContext> const& nested_context_arg)
 {
+    internal_native_display.reset();
+    internal_display_clients_present = false;
+
     nested_context = nested_context_arg;
     auto fds = nested_context->platform_fd_items();
     drm_fd = fds.at(0);
@@ -42,6 +51,12 @@
     nested_context->drm_set_gbm_device(gbm.device);
 }
 
+mgm::NativePlatform::~NativePlatform()
+{
+    internal_display_clients_present = false;
+    internal_native_display.reset();
+}
+
 std::shared_ptr<mg::GraphicBufferAllocator> mgm::NativePlatform::create_buffer_allocator(
         std::shared_ptr<mg::BufferInitializer> const& buffer_initializer)
 {
@@ -80,9 +95,14 @@
     return std::make_shared<MesaNativePlatformIPCPackage>(auth_fd);
 }
 
+// TODO: Currently this will not work in multimonitor scenarios!. Use of an internal client inside a nested Mir on Mesa will end in
+// a deadlock inside the Mesa-EGL layer between the multiple compositor threads. ~racarr
 std::shared_ptr<mg::InternalClient> mgm::NativePlatform::create_internal_client()
 {
-    BOOST_THROW_EXCEPTION(std::runtime_error("MesaNativePlatform::create_internal_client is not implemented yet!"));
+    if (!internal_native_display)
+        internal_native_display = std::make_shared<mgm::InternalNativeDisplay>(get_ipc_package());
+    internal_display_clients_present = true;
+    return std::make_shared<mgm::InternalClient>(internal_native_display);
 }
 
 void mgm::NativePlatform::fill_ipc_package(BufferIPCPacker* packer, Buffer const* buffer) const
--- a/src/platform/graphics/mesa/native_platform.h
+++ b/src/platform/graphics/mesa/native_platform.h
@@ -30,9 +30,13 @@
 {
 namespace mesa
 {
+class InternalNativeDisplay; 
+
 class NativePlatform : public graphics::NativePlatform
 {
 public:
+    virtual ~NativePlatform();
+
     void initialize(std::shared_ptr<NestedContext> const& nested_context);
     std::shared_ptr<GraphicBufferAllocator> create_buffer_allocator(
         std::shared_ptr<BufferInitializer> const& buffer_initializer) override;
@@ -40,6 +44,10 @@
     std::shared_ptr<InternalClient> create_internal_client() override;
     void fill_ipc_package(BufferIPCPacker* packer, Buffer const* buffer) const override;
 
+    //connection shared by all internal clients
+    static bool internal_display_clients_present;
+    static std::shared_ptr<InternalNativeDisplay> internal_native_display;
+
 private:
     int drm_fd;
     std::shared_ptr<NestedContext> nested_context;
--- a/src/platform/graphics/mesa/platform.cpp
+++ b/src/platform/graphics/mesa/platform.cpp
@@ -17,6 +17,7 @@
  */
 
 #include "platform.h"
+#include "native_platform.h"
 #include "buffer_allocator.h"
 #include "display.h"
 #include "internal_client.h"
@@ -180,5 +181,6 @@
 extern "C" int mir_server_mesa_egl_native_display_is_valid(MirMesaEGLNativeDisplay* display)
 {
     return ((mgm::Platform::internal_display_clients_present) &&
-            (display == mgm::Platform::internal_native_display.get()));
+            (display == mgm::Platform::internal_native_display.get())) || ((mgm::NativePlatform::internal_display_clients_present) &&
+            (display == mgm::NativePlatform::internal_native_display.get()));
 }
