#  Copyright 2005 Adam Jackson.
#
#  Permission is hereby granted, free of charge, to any person obtaining a
#  copy of this software and associated documentation files (the "Software"),
#  to deal in the Software without restriction, including without limitation
#  on the rights to use, copy, modify, merge, publish, distribute, sub
#  license, and/or sell copies of the Software, and to permit persons to whom
#  the Software is furnished to do so, subject to the following conditions:
#
#  The above copyright notice and this permission notice (including the next
#  paragraph) shall be included in all copies or substantial portions of the
#  Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.  IN NO EVENT SHALL
#  ADAM JACKSON BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
#  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
#  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# Process this file with autoconf to produce a configure script

# Initialize Autoconf
AC_PREREQ([2.63])
AC_INIT([xf86-video-intel],
        [2.15.0],
        [https://bugs.freedesktop.org/enter_bug.cgi?product=xorg],
        [xf86-video-intel])
AC_CONFIG_SRCDIR([Makefile.am])
AC_CONFIG_HEADERS([config.h])
AC_CONFIG_AUX_DIR([build-aux])
AC_CONFIG_MACRO_DIR([m4])

# Initialize Automake
AM_INIT_AUTOMAKE([1.10 foreign dist-bzip2])
AM_MAINTAINER_MODE([enable])

# Support silent build rules, requires at least automake-1.11. Disable
# by either passing --disable-silent-rules to configure or passing V=1
# to make
m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])

# Require X.Org macros 1.8 or later for MAN_SUBSTS set by XORG_MANPAGE_SECTIONS
m4_ifndef([XORG_MACROS_VERSION],
          [m4_fatal([must install xorg-macros 1.8 or later before running autoconf/autogen.
  Hint: either install from source, git://anongit.freedesktop.org/xorg/util/macros or,
  depending on you distribution, try package 'xutils-dev' or 'xorg-x11-util-macros'])])

XORG_MACROS_VERSION(1.8)
XORG_DEFAULT_OPTIONS

# Require X.Org server macros (i.e. XORG_DRIVER_CHECK_EXT) to check for required modules 
m4_ifndef([XORG_DRIVER_CHECK_EXT],
          [m4_fatal([must install xorg-server macros before running autoconf/autogen.
  Hint: either install from source, git://anongit.freedesktop.org/xorg/xserver or,
  depending on your distribution, try package 'xserver-xorg-dev' or 'xorg-x11-server-devel'])])

# Initialize libtool
LT_PREREQ([2.2])
LT_INIT([disable-static])

PKG_CHECK_MODULES(GEN4ASM, [intel-gen4asm >= 1.1], [gen4asm=yes], [gen4asm=no])
AM_CONDITIONAL(HAVE_GEN4ASM, test x$gen4asm = xyes)

PKG_CHECK_MODULES(UDEV, [libudev], [udev=yes], [udev=no])
if test x"$udev" = xyes; then
	AC_DEFINE(HAVE_UDEV,1,[Enable udev-based monitor hotplug detection])
fi

PKG_CHECK_MODULES(X11, [x11 xrender xext pixman-1], [x11=yes], [x11=no])
AM_CONDITIONAL(HAVE_X11, test x$x11 = xyes)

AH_TOP([#include "xorg-server.h"])

# Define a configure option for an alternate module directory
AC_ARG_WITH(xorg-module-dir,
            AS_HELP_STRING([--with-xorg-module-dir=DIR],
                           [Default xorg module directory [[default=$libdir/xorg/modules]]]),
            [moduledir="$withval"],
            [moduledir="$libdir/xorg/modules"])

AC_ARG_ENABLE(dri, AS_HELP_STRING([--disable-dri],
                                  [Disable DRI support [[default=auto]]]))

AC_ARG_ENABLE(xvmc, AS_HELP_STRING([--disable-xvmc],
                                  [Disable XvMC support [[default=yes]]]),
              [XVMC="$enableval"],
              [XVMC=yes])

AC_ARG_ENABLE(kms-only, AS_HELP_STRING([--enable-kms-only],
                                  [Assume KMS support [[default=no]]]),
              [KMS_ONLY="$enableval"],
              [KMS_ONLY=no])

AC_ARG_ENABLE(sna,
	      AS_HELP_STRING([--enable-sna],
			     [Enable SandyBridge's New Acceleration (SNA) [default=no]]),
	      [SNA="$enableval"],
	      [SNA=no])

AC_ARG_ENABLE(vmap,
	      AS_HELP_STRING([--enable-vmap],
			     [Enable use of vmap [default=no]]),
	      [VMAP="$enableval"],
	      [VMAP=no])

AC_ARG_ENABLE(debug,
	      AS_HELP_STRING([--enable-debug],
			     [Enables internal debugging [default=no]]),
              [DEBUG="$enableval"],
              [DEBUG=no])

# Store the list of server defined optional extensions in REQUIRED_MODULES
XORG_DRIVER_CHECK_EXT(RANDR, randrproto)
XORG_DRIVER_CHECK_EXT(RENDER, renderproto)
XORG_DRIVER_CHECK_EXT(XF86DRI, xextproto x11)
XORG_DRIVER_CHECK_EXT(DPMSExtension, xextproto)

# Obtain compiler/linker options for the driver dependencies
PKG_CHECK_MODULES(XORG, [xorg-server >= 1.6 xproto fontsproto $REQUIRED_MODULES])
PKG_CHECK_MODULES(DRM, [libdrm >= 2.4.23])
PKG_CHECK_MODULES(DRI, [xf86driproto], , DRI=no)
PKG_CHECK_MODULES(DRI2, [dri2proto >= 2.6])
PKG_CHECK_MODULES(PCIACCESS, [pciaccess >= 0.10])

sdkdir=`$PKG_CONFIG --variable=sdkdir xorg-server`

if test "x$enable_dri" != "xno"; then
        save_CFLAGS="$CFLAGS"
        save_CPPFLAGS="$CPPFLAGS"
        CFLAGS="$XORG_CFLAGS $DRI_CFLAGS $DRM_CFLAGS"
        CPPFLAGS="$XORG_CFLAGS $DRI_CFLAGS $DRM_CFLAGS"
        AC_CHECK_HEADERS([dri.h sarea.h dristruct.h],, [DRI=no],
                [/* for dri.h */
                 #include <xf86str.h>
                 /* for dristruct.h */
                 #include <xorg-server.h>
                 #ifdef HAVE_DRI_H
                 # include <dri.h>
                 #endif
                 #ifdef HAVE_SAREA_H
                 # include <sarea.h>
                 #endif
                ])
        CFLAGS="$save_CFLAGS $DEBUGFLAGS"
        CPPFLAGS="$save_CPPFLAGS"
else
        DRI=no
fi

AC_MSG_CHECKING([whether to include DRI support])
AC_MSG_RESULT([${DRI-yes}])

AM_CONDITIONAL(DRI, test x$DRI != xno)
if test "x$DRI" != "xno"; then
        AC_DEFINE(XF86DRI,1,[Enable DRI driver support])
        AC_DEFINE(XF86DRI_DEVEL,1,[Enable developmental DRI driver support])
else
        DRI_CFLAGS=""
        DRI_LIBS=""

        if test "x$enable_dri" = "xyes"; then
                AC_MSG_ERROR([DRI requested but prerequisites not found])
        fi
fi

if test "$XVMC" = yes; then
	PKG_CHECK_MODULES(XVMCLIB,
			  [xvmc xext xfixes dri2proto x11-xcb xcb-dri2 xcb-aux],
			  [XVMC=yes], [XVMC=no])
fi
AC_MSG_CHECKING([whether to include XvMC support])
AC_MSG_RESULT([$XVMC])
AM_CONDITIONAL(XVMC, test x$XVMC = xyes)
if test "x$XVMC" = xyes; then
	AC_DEFINE(ENABLE_XVMC,1,[Enable XvMC support])
fi

AM_CONDITIONAL(KMS_ONLY, test x$KMS_ONLY = xyes)
if test "x$KMS_ONLY" = xyes; then
	AC_DEFINE(KMS_ONLY,1,[Assume KMS support])
fi

AM_CONDITIONAL(USE_VMAP, test x$VMAP = xyes)
if test "x$VMAP" = xyes; then
	AC_DEFINE(USE_VMAP,1,[Assume VMAP support])
fi

AM_CONDITIONAL(SNA, test x$SNA != xno)
AC_MSG_CHECKING([whether to include SNA support])
if test "x$SNA" != "xno"; then
	AC_DEFINE(USE_SNA, 1, [Enable SNA support])
fi
AC_MSG_RESULT([$SNA])

AM_CONDITIONAL(DEBUG, test x$DEBUG != xno)
if test "x$DEBUG" = xno; then
	AC_DEFINE(NDEBUG,1,[Disable internal debugging])
fi
if test "x$DEBUG" != xno; then
	AC_DEFINE(HAS_EXTRA_DEBUG,1,[Enable additional debugging])
fi
if test "x$DEBUG" = xfull; then
	AC_DEFINE(HAS_DEBUG_FULL,1,[Enable all debugging])
fi

AC_CHECK_HEADERS([sys/timerfd.h])

DRIVER_NAME=intel
AC_SUBST([DRIVER_NAME])
AC_SUBST([moduledir])

AC_CONFIG_FILES([
                Makefile
                uxa/Makefile
                src/Makefile
                src/xvmc/Makefile
                src/xvmc/shader/Makefile
                src/xvmc/shader/mc/Makefile
                src/xvmc/shader/vld/Makefile
                src/legacy/Makefile
                src/legacy/i810/Makefile
                src/legacy/i810/xvmc/Makefile
                src/sna/Makefile
                man/Makefile
                src/render_program/Makefile
		test/Makefile
])
AC_OUTPUT
