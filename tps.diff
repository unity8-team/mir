=== modified file 'client-ABI-sha1sums'
--- client-ABI-sha1sums	2014-12-15 06:24:03 +0000
+++ client-ABI-sha1sums	2014-12-17 12:06:59 +0000
@@ -10,7 +10,7 @@
 b141c4d79802ad626d969249c0004744e5c2a525  include/client/mir_toolkit/mir_wait.h
 c367f5c9285936820fbd50961827d6ce58fb7ff4  include/client/mir_toolkit/version.h
 23a009b06de7bac17d33d988dc8d968be8bc094a  include/common/mir_toolkit/client_types.h
-3e85c6d9dd1dca9767ea8bdf13ea6bbd1cb11c30  include/common/mir_toolkit/common.h
+c7c708734715a6d1b6fb2652584adb912071a518  include/common/mir_toolkit/common.h
 fce4c1a9e0d037244f7e9e96ea2d8eaab4fc404c  include/common/mir_toolkit/cursors.h
 d71dddf6c4275ee423d3e0fa204e3b77b4d87401  include/common/mir_toolkit/event.h
 49403c824f69fa1cc1f58bf5fe635639148765eb  include/common/mir_toolkit/input/input_event.h

=== modified file 'common-ABI-sha1sums'
--- common-ABI-sha1sums	2014-12-15 06:24:03 +0000
+++ common-ABI-sha1sums	2014-12-17 12:06:59 +0000
@@ -16,7 +16,7 @@
 5ab81600183fdaca3fb949beb2307d1f6e4cbb61  include/common/mir/log.h
 9ae8473df05dd9e048a73797f01a2f34f7447554  include/common/mir/time/types.h
 23a009b06de7bac17d33d988dc8d968be8bc094a  include/common/mir_toolkit/client_types.h
-3e85c6d9dd1dca9767ea8bdf13ea6bbd1cb11c30  include/common/mir_toolkit/common.h
+c7c708734715a6d1b6fb2652584adb912071a518  include/common/mir_toolkit/common.h
 fce4c1a9e0d037244f7e9e96ea2d8eaab4fc404c  include/common/mir_toolkit/cursors.h
 d71dddf6c4275ee423d3e0fa204e3b77b4d87401  include/common/mir_toolkit/event.h
 49403c824f69fa1cc1f58bf5fe635639148765eb  include/common/mir_toolkit/input/input_event.h

=== modified file 'include/common/mir_toolkit/common.h'
--- include/common/mir_toolkit/common.h	2014-12-09 03:14:55 +0000
+++ include/common/mir_toolkit/common.h	2014-12-17 12:06:59 +0000
@@ -109,7 +109,8 @@
 typedef enum MirPromptSessionState
 {
     mir_prompt_session_state_stopped = 0,
-    mir_prompt_session_state_started
+    mir_prompt_session_state_started,
+    mir_prompt_session_state_suspended
 } MirPromptSessionState;
 
 /**

=== modified file 'include/server/mir/scene/prompt_session.h'
--- include/server/mir/scene/prompt_session.h	2014-06-12 10:24:08 +0000
+++ include/server/mir/scene/prompt_session.h	2014-12-17 12:06:59 +0000
@@ -29,6 +29,30 @@
 
 class PromptSession : public frontend::PromptSession
 {
+public:
+    /**
+     * Start a prompt session
+     *   \param [in] helper  The prompt session helper session
+     */
+    virtual void start(std::shared_ptr<Session> const& helper_session) = 0;
+
+    /**
+     * Stop a prompt session
+     *   \param [in] helper  The prompt session helper session
+     */
+    virtual void stop(std::shared_ptr<Session> const& helper_session) = 0;
+
+    /**
+     * Suspend a prompt session
+     *   \param [in] helper  The prompt session helper session
+     */
+    virtual void suspend(std::shared_ptr<Session> const& helper_session) = 0;
+
+    /**
+     * Resume a prompt session
+     *   \param [in] helper  The prompt session helper session
+     */
+    virtual void resume(std::shared_ptr<Session> const& helper_session) = 0;
 };
 
 }

=== modified file 'include/server/mir/scene/prompt_session_listener.h'
--- include/server/mir/scene/prompt_session_listener.h	2014-06-12 10:06:11 +0000
+++ include/server/mir/scene/prompt_session_listener.h	2014-12-17 12:06:59 +0000
@@ -33,6 +33,8 @@
 public:
     virtual void starting(std::shared_ptr<PromptSession> const& prompt_session) = 0;
     virtual void stopping(std::shared_ptr<PromptSession> const& prompt_session) = 0;
+    virtual void suspending(std::shared_ptr<PromptSession> const& prompt_session) = 0;
+    virtual void resuming(std::shared_ptr<PromptSession> const& prompt_session) = 0;
 
     virtual void prompt_provider_added(PromptSession const& prompt_session, std::shared_ptr<Session> const& prompt_provider) = 0;
     virtual void prompt_provider_removed(PromptSession const& prompt_session, std::shared_ptr<Session> const& prompt_provider) = 0;

=== modified file 'include/server/mir/scene/prompt_session_manager.h'
--- include/server/mir/scene/prompt_session_manager.h	2014-12-08 04:03:47 +0000
+++ include/server/mir/scene/prompt_session_manager.h	2014-12-17 12:06:59 +0000
@@ -51,6 +51,18 @@
     virtual void stop_prompt_session(std::shared_ptr<PromptSession> const& prompt_session) const = 0;
 
     /**
+     * Suspend a prompt session
+     *   \param [in] prompt_session  The prompt session
+     */
+    virtual void suspend_prompt_session(std::shared_ptr<PromptSession> const& prompt_session) const = 0;
+
+    /**
+     * Resume a suspended prompt session
+     *   \param [in] prompt_session  The prompt session
+     */
+    virtual void resume_prompt_session(std::shared_ptr<PromptSession> const& prompt_session) const = 0;
+
+    /**
      * Add a prompt provider to an existing prompt session
      *   \param [in] prompt_session  The prompt session
      *   \param [in] prompt_provider The prompt provider to add to the prompt session

=== modified file 'include/server/mir/scene/session.h'
--- include/server/mir/scene/session.h	2014-12-08 04:03:47 +0000
+++ include/server/mir/scene/session.h	2014-12-17 12:06:59 +0000
@@ -43,6 +43,8 @@
 
     virtual void start_prompt_session() = 0;
     virtual void stop_prompt_session() = 0;
+    virtual void suspend_prompt_session() = 0;
+    virtual void resume_prompt_session() = 0;
 };
 }
 }

=== modified file 'platform-ABI-sha1sums'
--- platform-ABI-sha1sums	2014-12-15 06:24:03 +0000
+++ platform-ABI-sha1sums	2014-12-17 12:06:59 +0000
@@ -16,7 +16,7 @@
 5ab81600183fdaca3fb949beb2307d1f6e4cbb61  include/common/mir/log.h
 9ae8473df05dd9e048a73797f01a2f34f7447554  include/common/mir/time/types.h
 23a009b06de7bac17d33d988dc8d968be8bc094a  include/common/mir_toolkit/client_types.h
-3e85c6d9dd1dca9767ea8bdf13ea6bbd1cb11c30  include/common/mir_toolkit/common.h
+c7c708734715a6d1b6fb2652584adb912071a518  include/common/mir_toolkit/common.h
 fce4c1a9e0d037244f7e9e96ea2d8eaab4fc404c  include/common/mir_toolkit/cursors.h
 d71dddf6c4275ee423d3e0fa204e3b77b4d87401  include/common/mir_toolkit/event.h
 49403c824f69fa1cc1f58bf5fe635639148765eb  include/common/mir_toolkit/input/input_event.h

=== modified file 'server-ABI-sha1sums'
--- server-ABI-sha1sums	2014-12-16 09:43:53 +0000
+++ server-ABI-sha1sums	2014-12-17 12:06:59 +0000
@@ -16,7 +16,7 @@
 5ab81600183fdaca3fb949beb2307d1f6e4cbb61  include/common/mir/log.h
 9ae8473df05dd9e048a73797f01a2f34f7447554  include/common/mir/time/types.h
 23a009b06de7bac17d33d988dc8d968be8bc094a  include/common/mir_toolkit/client_types.h
-3e85c6d9dd1dca9767ea8bdf13ea6bbd1cb11c30  include/common/mir_toolkit/common.h
+c7c708734715a6d1b6fb2652584adb912071a518  include/common/mir_toolkit/common.h
 fce4c1a9e0d037244f7e9e96ea2d8eaab4fc404c  include/common/mir_toolkit/cursors.h
 d71dddf6c4275ee423d3e0fa204e3b77b4d87401  include/common/mir_toolkit/event.h
 49403c824f69fa1cc1f58bf5fe635639148765eb  include/common/mir_toolkit/input/input_event.h
@@ -79,11 +79,11 @@
 d5273f3363b0b776427d5e3f1af99f0f2bcf3fa6  include/server/mir/scene/observer.h
 10db25fbaefcabb3b191177ed70f5972df7f05f0  include/server/mir/scene/placement_strategy.h
 74f7f66ffc3e15c428082fb961e748cb4f39dafc  include/server/mir/scene/prompt_session_creation_parameters.h
-4e8269c822ad2daddd92115cbe5332caaa9ef4cc  include/server/mir/scene/prompt_session.h
-79adf11e2b1778897ed97d1713ba4c3d34eb1f31  include/server/mir/scene/prompt_session_listener.h
-27f614f98ad7c249d9b12dcca30a324220cdd25b  include/server/mir/scene/prompt_session_manager.h
+b657cfb8fb31140b83b78fc19135dd0165ede67b  include/server/mir/scene/prompt_session.h
+a745a63d413ced63b82350b8c253b65dffd5bf44  include/server/mir/scene/prompt_session_listener.h
+a09a3f18ecea53dc45386c1e2baf545c4177c047  include/server/mir/scene/prompt_session_manager.h
 5edf446380070f567500069e422d293e88468ee5  include/server/mir/scene/session_coordinator.h
-f148a69caa39756d43cfaf7cc868ad681bda9ef6  include/server/mir/scene/session.h
+cf13a79b20acf9e53db6e0078df085b9a023d8da  include/server/mir/scene/session.h
 ee94083f10f890e24c0e0bbdb94842e2dd788deb  include/server/mir/scene/session_listener.h
 7f5f26000fd2312373817d05c488a6a950a47c82  include/server/mir/scene/snapshot.h
 5bab4dc0a6488b8b9d47e958c6bab94f1dcf2c57  include/server/mir/scene/surface_buffer_access.h

=== modified file 'src/include/server/mir/scene/null_prompt_session_listener.h'
--- src/include/server/mir/scene/null_prompt_session_listener.h	2014-12-08 04:03:47 +0000
+++ src/include/server/mir/scene/null_prompt_session_listener.h	2014-12-17 12:06:59 +0000
@@ -30,6 +30,8 @@
 public:
     void starting(std::shared_ptr<PromptSession> const&) override {}
     void stopping(std::shared_ptr<PromptSession> const&) override {}
+    void suspending(std::shared_ptr<PromptSession> const&) override {}
+    void resuming(std::shared_ptr<PromptSession> const&) override {}
 
     void prompt_provider_added(PromptSession const&, std::shared_ptr<Session> const&) override {}
     void prompt_provider_removed(PromptSession const&, std::shared_ptr<Session> const&) override {}

=== modified file 'src/server/scene/CMakeLists.txt'
--- src/server/scene/CMakeLists.txt	2014-12-08 04:03:47 +0000
+++ src/server/scene/CMakeLists.txt	2014-12-17 12:06:59 +0000
@@ -21,6 +21,7 @@
   legacy_scene_change_notification.cpp
   legacy_surface_change_notification.cpp
   prompt_session_container.cpp
+  prompt_session_impl.cpp
   prompt_session_manager_impl.cpp
   rendering_tracker.cpp
   default_coordinate_translator.cpp

=== modified file 'src/server/scene/application_session.cpp'
--- src/server/scene/application_session.cpp	2014-12-08 04:03:47 +0000
+++ src/server/scene/application_session.cpp	2014-12-17 12:06:59 +0000
@@ -202,3 +202,21 @@
     stop_event.prompt_session.new_state = mir_prompt_session_state_stopped;
     event_sink->handle_event(stop_event);
 }
+
+void ms::ApplicationSession::suspend_prompt_session()
+{
+    MirEvent start_event;
+    memset(&start_event, 0, sizeof start_event);
+    start_event.type = mir_event_type_prompt_session_state_change;
+    start_event.prompt_session.new_state = mir_prompt_session_state_suspended;
+    event_sink->handle_event(start_event);
+}
+
+void ms::ApplicationSession::resume_prompt_session()
+{
+    MirEvent start_event;
+    memset(&start_event, 0, sizeof start_event);
+    start_event.type = mir_event_type_prompt_session_state_change;
+    start_event.prompt_session.new_state = mir_prompt_session_state_started;
+    event_sink->handle_event(start_event);
+}

=== modified file 'src/server/scene/application_session.h'
--- src/server/scene/application_session.h	2014-12-08 04:03:47 +0000
+++ src/server/scene/application_session.h	2014-12-17 12:06:59 +0000
@@ -73,6 +73,8 @@
 
     void start_prompt_session() override;
     void stop_prompt_session() override;
+    void suspend_prompt_session() override;
+    void resume_prompt_session() override;
 
 protected:
     ApplicationSession(ApplicationSession const&) = delete;

=== added file 'src/server/scene/prompt_session_impl.cpp'
--- src/server/scene/prompt_session_impl.cpp	1970-01-01 00:00:00 +0000
+++ src/server/scene/prompt_session_impl.cpp	2014-12-17 12:06:59 +0000
@@ -0,0 +1,81 @@
+/*
+ * Copyright Â© 2014 Canonical Ltd.
+ *
+ * This program is free software: you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 3,
+ * as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ * Authored by: Nick Dedekind <nick.dedekind@canonical.com>
+ */
+
+#include "prompt_session_impl.h"
+
+#include "mir/scene/session.h"
+
+namespace ms = mir::scene;
+
+ms::PromptSessionImpl::PromptSessionImpl() :
+    current_state(mir_prompt_session_state_stopped)
+{
+}
+
+void ms::PromptSessionImpl::start(std::shared_ptr<Session> const& helper_session)
+{
+    std::lock_guard<std::mutex> lk(guard);
+
+    if (current_state == mir_prompt_session_state_stopped)
+    {
+        current_state = mir_prompt_session_state_started;
+        if (helper_session)
+            helper_session->start_prompt_session();
+    }
+}
+
+void ms::PromptSessionImpl::stop(std::shared_ptr<Session> const& helper_session)
+{
+    std::lock_guard<std::mutex> lk(guard);
+
+    if (current_state != mir_prompt_session_state_stopped)
+    {
+        current_state = mir_prompt_session_state_stopped;
+        if (helper_session)
+            helper_session->stop_prompt_session();
+    }
+}
+
+void ms::PromptSessionImpl::suspend(std::shared_ptr<Session> const& helper_session)
+{
+    std::lock_guard<std::mutex> lk(guard);
+
+    if (current_state == mir_prompt_session_state_started)
+    {
+        current_state = mir_prompt_session_state_suspended;
+        if (helper_session)
+            helper_session->suspend_prompt_session();
+    }
+}
+
+void ms::PromptSessionImpl::resume(std::shared_ptr<Session> const& helper_session)
+{
+    std::lock_guard<std::mutex> lk(guard);
+
+    if (current_state == mir_prompt_session_state_suspended)
+    {
+        current_state = mir_prompt_session_state_started;
+        if (helper_session)
+            helper_session->resume_prompt_session();
+    }
+}
+
+MirPromptSessionState ms::PromptSessionImpl::state() const
+{
+    return current_state;
+}

=== added file 'src/server/scene/prompt_session_impl.h'
--- src/server/scene/prompt_session_impl.h	1970-01-01 00:00:00 +0000
+++ src/server/scene/prompt_session_impl.h	2014-12-17 12:06:59 +0000
@@ -0,0 +1,50 @@
+/*
+ * Copyright Â© 2014 Canonical Ltd.
+ *
+ * This program is free software: you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 3,
+ * as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ * Authored by: Nick Dedekind <nick.dedekind@canonical.com>
+ */
+
+#ifndef MIR_SCENE_PROMPT_SESSION_IMPL_H_
+#define MIR_SCENE_PROMPT_SESSION_IMPL_H_
+
+#include "mir/scene/prompt_session.h"
+
+#include <mutex>
+
+namespace mir
+{
+namespace scene
+{
+
+class PromptSessionImpl : public scene::PromptSession
+{
+public:
+    explicit PromptSessionImpl();
+
+    void start(std::shared_ptr<Session> const& helper_session) override;
+    void stop(std::shared_ptr<Session> const& helper_session) override;
+    void suspend(std::shared_ptr<Session> const& helper_session) override;
+    void resume(std::shared_ptr<Session> const& helper_session) override;
+
+    MirPromptSessionState state() const;
+
+private:
+    std::mutex mutable guard;
+    MirPromptSessionState current_state;
+};
+}
+}
+
+#endif // MIR_SCENE_PROMPT_SESSION_IMPL_H_

=== modified file 'src/server/scene/prompt_session_manager_impl.cpp'
--- src/server/scene/prompt_session_manager_impl.cpp	2014-12-08 04:03:47 +0000
+++ src/server/scene/prompt_session_manager_impl.cpp	2014-12-17 12:06:59 +0000
@@ -21,9 +21,9 @@
 #include "mir/scene/prompt_session_creation_parameters.h"
 #include "mir/scene/prompt_session_listener.h"
 #include "mir/scene/session.h"
-#include "mir/scene/prompt_session.h"
 #include "session_container.h"
 #include "prompt_session_container.h"
+#include "prompt_session_impl.h"
 
 namespace ms = mir::scene;
 
@@ -45,12 +45,7 @@
     prompt_session_container->for_each_participant_in_prompt_session(prompt_session.get(),
         [&](std::weak_ptr<Session> const& session, PromptSessionContainer::ParticipantType type)
         {
-            if (type == PromptSessionContainer::ParticipantType::helper)
-            {
-                if (auto locked_session = session.lock())
-                    locked_session->stop_prompt_session();
-            }
-            else if (type == PromptSessionContainer::ParticipantType::prompt_provider)
+            if (type == PromptSessionContainer::ParticipantType::prompt_provider)
             {
                 if (auto locked_session = session.lock())
                     participants.push_back(locked_session);
@@ -63,6 +58,8 @@
             prompt_session_listener->prompt_provider_removed(*prompt_session, participant);
     }
 
+    prompt_session->stop(helper_for(prompt_session));
+
     prompt_session_container->remove_prompt_session(prompt_session);
 
     prompt_session_listener->stopping(prompt_session);
@@ -104,11 +101,27 @@
     stop_prompt_session_locked(lock, prompt_session);
 }
 
+void ms::PromptSessionManagerImpl::suspend_prompt_session(std::shared_ptr<PromptSession> const& prompt_session) const
+{
+    std::lock_guard<std::mutex> lock(prompt_sessions_mutex);
+
+    prompt_session->suspend(helper_for(prompt_session));
+    prompt_session_listener->suspending(prompt_session);
+}
+
+void ms::PromptSessionManagerImpl::resume_prompt_session(std::shared_ptr<PromptSession> const& prompt_session) const
+{
+    std::lock_guard<std::mutex> lock(prompt_sessions_mutex);
+
+    prompt_session->resume(helper_for(prompt_session));
+    prompt_session_listener->resuming(prompt_session);
+}
+
 std::shared_ptr<ms::PromptSession> ms::PromptSessionManagerImpl::start_prompt_session_for(
     std::shared_ptr<Session> const& session,
     PromptSessionCreationParameters const& params) const
 {
-    auto prompt_session = std::make_shared<PromptSession>();
+    auto prompt_session = std::make_shared<PromptSessionImpl>();
     std::shared_ptr<Session> application_session;
 
     app_container->for_each(
@@ -129,7 +142,7 @@
     if (!prompt_session_container->insert_participant(prompt_session.get(), session, PromptSessionContainer::ParticipantType::helper))
         BOOST_THROW_EXCEPTION(std::runtime_error("Could not set prompt session helper"));
 
-    session->start_prompt_session();
+    prompt_session->start(session);
     prompt_session_listener->starting(prompt_session);
 
     prompt_session_container->insert_participant(prompt_session.get(), application_session, PromptSessionContainer::ParticipantType::application);

=== modified file 'src/server/scene/prompt_session_manager_impl.h'
--- src/server/scene/prompt_session_manager_impl.h	2014-12-08 04:03:47 +0000
+++ src/server/scene/prompt_session_manager_impl.h	2014-12-17 12:06:59 +0000
@@ -50,6 +50,12 @@
     void stop_prompt_session(
         std::shared_ptr<PromptSession> const& prompt_session) const override;
 
+    void suspend_prompt_session(
+        std::shared_ptr<PromptSession> const& prompt_session) const override;
+
+    void resume_prompt_session(
+        std::shared_ptr<PromptSession> const& prompt_session) const override;
+
     void add_prompt_provider(
         std::shared_ptr<PromptSession> const& prompt_session,
         std::shared_ptr<Session> const& prompt_provider) const override;

=== modified file 'tests/acceptance-tests/test_prompt_session_client_api.cpp'
--- tests/acceptance-tests/test_prompt_session_client_api.cpp	2014-12-08 04:03:47 +0000
+++ tests/acceptance-tests/test_prompt_session_client_api.cpp	2014-12-17 12:06:59 +0000
@@ -28,6 +28,7 @@
 #include "mir/fd.h"
 
 #include "mir_test_doubles/stub_session_authorizer.h"
+#include "mir_test_doubles/mock_prompt_session_listener.h"
 #include "mir_test_framework/headless_in_process_server.h"
 #include "mir_test_framework/using_stub_client_platform.h"
 #include "mir_test/popen.h"
@@ -37,6 +38,7 @@
 
 #include <condition_variable>
 #include <mutex>
+#include <atomic>
 
 namespace mtd = mir::test::doubles;
 namespace mtf = mir_test_framework;
@@ -48,22 +50,6 @@
 
 namespace
 {
-struct MockPromptSessionListener : ms::PromptSessionListener
-{
-    MockPromptSessionListener()
-    {
-    }
-
-    MOCK_METHOD1(starting, void(std::shared_ptr<ms::PromptSession> const& prompt_session));
-    MOCK_METHOD1(stopping, void(std::shared_ptr<ms::PromptSession> const& prompt_session));
-
-    MOCK_METHOD2(prompt_provider_added,
-        void(ms::PromptSession const& session, std::shared_ptr<ms::Session> const& provider));
-
-    MOCK_METHOD2(prompt_provider_removed,
-        void(ms::PromptSession const& session, std::shared_ptr<ms::Session> const& provider));
-};
-
 struct MockSessionAuthorizer : public mtd::StubSessionAuthorizer
 {
     MockSessionAuthorizer()
@@ -115,9 +101,11 @@
     std::shared_ptr<ms::PromptSession> server_prompt_session;
     mtf::UsingStubClientPlatform using_stub_client_platform;
 
-    mir::CachedPtr<MockPromptSessionListener> mock_prompt_session_listener;
+    mir::CachedPtr<mtd::MockPromptSessionListener> mock_prompt_session_listener;
     mir::CachedPtr<MockSessionAuthorizer> mock_prompt_session_authorizer;
 
+    std::atomic<bool> prompt_session_state_change_callback_called;
+
     std::shared_ptr<MockSessionAuthorizer> the_mock_session_authorizer()
     {
         return mock_prompt_session_authorizer([this]
@@ -126,11 +114,11 @@
             });
     }
 
-    std::shared_ptr<MockPromptSessionListener> the_mock_prompt_session_listener()
+    std::shared_ptr<mtd::MockPromptSessionListener> the_mock_prompt_session_listener()
     {
         return mock_prompt_session_listener([]
             {
-                return std::make_shared<NiceMock<MockPromptSessionListener>>();
+                return std::make_shared<NiceMock<mtd::MockPromptSessionListener>>();
             });
     }
 
@@ -195,6 +183,17 @@
             WillOnce(SaveArg<0>(&server_prompt_session));
     }
 
+    void wait_for_state_change_callback()
+    {
+        for (int i = 0; !prompt_session_state_change_callback_called.load() && i < 5000; ++i)
+        {
+            std::this_thread::sleep_for(std::chrono::milliseconds(1));
+            std::this_thread::yield();
+        }
+
+        prompt_session_state_change_callback_called.store(false);
+    }
+
     void TearDown() override
     {
         application_session.reset();
@@ -266,6 +265,7 @@
 {
     PromptSessionClientAPI* self = static_cast<PromptSessionClientAPI*>(context);
     self->prompt_session_state_change(prompt_provider, state);
+    self->prompt_session_state_change_callback_called.store(true);
 }
 
 void client_fd_callback(MirPromptSession*, size_t count, int const* fds, void* context)
@@ -421,20 +421,49 @@
 {
     connection = mir_connect_sync(new_connection().c_str(), __PRETTY_FUNCTION__);
 
-    EXPECT_CALL(*this, prompt_session_state_change(_, mir_prompt_session_state_started));
+    {
+        InSequence seq;
+        EXPECT_CALL(*this, prompt_session_state_change(_, mir_prompt_session_state_started));
+        EXPECT_CALL(*this, prompt_session_state_change(_, mir_prompt_session_state_stopped));
+    }
 
     capture_server_prompt_session();
 
     MirPromptSession* prompt_session = mir_connection_create_prompt_session_sync(
         connection, application_session_pid, prompt_session_state_change_callback, this);
-
-    EXPECT_CALL(*this, prompt_session_state_change(_, mir_prompt_session_state_stopped));
+    wait_for_state_change_callback();
 
     the_prompt_session_manager()->stop_prompt_session(server_prompt_session);
+    wait_for_state_change_callback();
 
     // Verify we have got the "stopped" notification before we go on and release the session
-    Mock::VerifyAndClearExpectations(the_mock_prompt_session_listener().get());
-
+    Mock::VerifyAndClearExpectations(this);
+
+    mir_prompt_session_release_sync(prompt_session);
+}
+
+TEST_F(PromptSessionClientAPI, notifies_when_server_suspends_prompt_session)
+{
+    connection = mir_connect_sync(new_connection().c_str(), __PRETTY_FUNCTION__);
+    {
+        InSequence seq;
+        EXPECT_CALL(*this, prompt_session_state_change(_, mir_prompt_session_state_started));
+        EXPECT_CALL(*this, prompt_session_state_change(_, mir_prompt_session_state_suspended));
+    }
+
+    capture_server_prompt_session();
+
+    MirPromptSession* prompt_session = mir_connection_create_prompt_session_sync(
+        connection, application_session_pid, prompt_session_state_change_callback, this);
+    wait_for_state_change_callback();
+
+    the_prompt_session_manager()->suspend_prompt_session(server_prompt_session);
+    wait_for_state_change_callback();
+
+    // Verify we have got the "suspend" notification before we go on and release the session
+    Mock::VerifyAndClearExpectations(this);
+
+    EXPECT_CALL(*this, prompt_session_state_change(_, mir_prompt_session_state_stopped));
     mir_prompt_session_release_sync(prompt_session);
 }
 

=== modified file 'tests/include/mir_test_doubles/mock_prompt_session_listener.h'
--- tests/include/mir_test_doubles/mock_prompt_session_listener.h	2014-06-12 10:06:11 +0000
+++ tests/include/mir_test_doubles/mock_prompt_session_listener.h	2014-12-17 12:06:59 +0000
@@ -36,6 +36,8 @@
 
     MOCK_METHOD1(starting, void(std::shared_ptr<scene::PromptSession> const&));
     MOCK_METHOD1(stopping, void(std::shared_ptr<scene::PromptSession> const&));
+    MOCK_METHOD1(suspending, void(std::shared_ptr<scene::PromptSession> const&));
+    MOCK_METHOD1(resuming, void(std::shared_ptr<scene::PromptSession> const&));
 
     MOCK_METHOD2(prompt_provider_added, void(scene::PromptSession const&, std::shared_ptr<scene::Session> const&));
     MOCK_METHOD2(prompt_provider_removed, void(scene::PromptSession const&, std::shared_ptr<scene::Session> const&));

=== modified file 'tests/include/mir_test_doubles/mock_scene_session.h'
--- tests/include/mir_test_doubles/mock_scene_session.h	2014-12-08 04:03:47 +0000
+++ tests/include/mir_test_doubles/mock_scene_session.h	2014-12-17 12:06:59 +0000
@@ -55,6 +55,8 @@
 
     MOCK_METHOD0(start_prompt_session, void());
     MOCK_METHOD0(stop_prompt_session, void());
+    MOCK_METHOD0(suspend_prompt_session, void());
+    MOCK_METHOD0(resume_prompt_session, void());
 };
 
 }

=== modified file 'tests/include/mir_test_doubles/null_prompt_session.h'
--- tests/include/mir_test_doubles/null_prompt_session.h	2014-06-12 10:24:08 +0000
+++ tests/include/mir_test_doubles/null_prompt_session.h	2014-12-17 12:06:59 +0000
@@ -29,6 +29,22 @@
 {
 class NullPromptSession : public scene::PromptSession
 {
+public:
+    void start(std::shared_ptr<scene::Session> const&) override
+    {
+    }
+
+    void stop(std::shared_ptr<scene::Session> const&) override
+    {
+    }
+
+    void suspend(std::shared_ptr<scene::Session> const&) override
+    {
+    }
+
+    void resume(std::shared_ptr<scene::Session> const&) override
+    {
+    }
 };
 }
 }

=== modified file 'tests/include/mir_test_doubles/null_prompt_session_manager.h'
--- tests/include/mir_test_doubles/null_prompt_session_manager.h	2014-12-08 04:03:47 +0000
+++ tests/include/mir_test_doubles/null_prompt_session_manager.h	2014-12-17 12:06:59 +0000
@@ -41,6 +41,14 @@
     {
     }
 
+    void suspend_prompt_session(std::shared_ptr<scene::PromptSession> const&) const override
+    {
+    }
+
+    void resume_prompt_session(std::shared_ptr<scene::PromptSession> const&) const override
+    {
+    }
+
     void add_prompt_provider(std::shared_ptr<scene::PromptSession> const&,
                              std::shared_ptr<scene::Session> const&) const
     {

=== modified file 'tests/include/mir_test_doubles/stub_scene_session.h'
--- tests/include/mir_test_doubles/stub_scene_session.h	2014-12-08 04:03:47 +0000
+++ tests/include/mir_test_doubles/stub_scene_session.h	2014-12-17 12:06:59 +0000
@@ -88,6 +88,14 @@
     {
     }
 
+    void suspend_prompt_session() override
+    {
+    }
+
+    void resume_prompt_session() override
+    {
+    }
+
     pid_t const pid;
 };
 

=== modified file 'tests/unit-tests/scene/CMakeLists.txt'
--- tests/unit-tests/scene/CMakeLists.txt	2014-12-08 04:03:47 +0000
+++ tests/unit-tests/scene/CMakeLists.txt	2014-12-17 12:06:59 +0000
@@ -10,6 +10,7 @@
   ${CMAKE_CURRENT_SOURCE_DIR}/test_mediating_display_changer.cpp
   ${CMAKE_CURRENT_SOURCE_DIR}/test_prompt_session_container.cpp
   ${CMAKE_CURRENT_SOURCE_DIR}/test_prompt_session_manager.cpp
+  ${CMAKE_CURRENT_SOURCE_DIR}/test_prompt_session_impl.cpp
 
   ${CMAKE_CURRENT_SOURCE_DIR}/test_surface.cpp
   ${CMAKE_CURRENT_SOURCE_DIR}/test_surface_impl.cpp

=== added file 'tests/unit-tests/scene/test_prompt_session_impl.cpp'
--- tests/unit-tests/scene/test_prompt_session_impl.cpp	1970-01-01 00:00:00 +0000
+++ tests/unit-tests/scene/test_prompt_session_impl.cpp	2014-12-17 12:06:59 +0000
@@ -0,0 +1,110 @@
+/*
+ * Copyright Â© 2014 Canonical Ltd.
+ *
+ * This program is free software: you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 3,
+ * as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ * Authored By: Nick Dedekind <nick.dedekind@canonical.com>
+ */
+
+
+#include "src/server/scene/prompt_session_impl.h"
+
+#include "mir_test_doubles/mock_scene_session.h"
+#include "mir_test/fake_shared.h"
+
+#include <gmock/gmock.h>
+#include <gtest/gtest.h>
+
+namespace ms = mir::scene;
+namespace mt = mir::test;
+namespace mtd = mir::test::doubles;
+
+using namespace ::testing;
+
+namespace
+{
+
+struct PromptSession : public testing::Test
+{
+    std::shared_ptr<mtd::MockSceneSession> const helper{std::make_shared<::testing::NiceMock<mtd::MockSceneSession>>()};
+};
+
+}
+
+TEST_F(PromptSession, start_when_stopped)
+{
+    ms::PromptSessionImpl prompt_session;
+    EXPECT_EQ(prompt_session.state(), mir_prompt_session_state_stopped);
+
+    EXPECT_CALL(*helper, start_prompt_session()).Times(1);
+    prompt_session.start(helper);
+
+    EXPECT_EQ(prompt_session.state(), mir_prompt_session_state_started);
+}
+
+TEST_F(PromptSession, stop_when_started)
+{
+    ms::PromptSessionImpl prompt_session;
+    prompt_session.start(helper);
+    EXPECT_EQ(prompt_session.state(), mir_prompt_session_state_started);
+
+    EXPECT_CALL(*helper, stop_prompt_session()).Times(1);
+    prompt_session.stop(helper);
+
+    EXPECT_EQ(prompt_session.state(), mir_prompt_session_state_stopped);
+}
+
+TEST_F(PromptSession, suspend_when_started)
+{
+    ms::PromptSessionImpl prompt_session;
+    prompt_session.start(helper);
+    EXPECT_EQ(prompt_session.state(), mir_prompt_session_state_started);
+
+    EXPECT_CALL(*helper, suspend_prompt_session()).Times(1);
+    prompt_session.suspend(helper);
+
+    EXPECT_EQ(prompt_session.state(), mir_prompt_session_state_suspended);
+}
+
+TEST_F(PromptSession, suspend_fails_to_stop_helper_when_not_started)
+{
+    ms::PromptSessionImpl prompt_session;
+
+    EXPECT_CALL(*helper, suspend_prompt_session()).Times(0);
+    prompt_session.suspend(helper);
+
+    EXPECT_EQ(prompt_session.state(), mir_prompt_session_state_stopped);
+}
+
+TEST_F(PromptSession, resume_when_suspended)
+{
+    ms::PromptSessionImpl prompt_session;
+    prompt_session.start(helper);
+    prompt_session.suspend(helper);
+    EXPECT_EQ(prompt_session.state(), mir_prompt_session_state_suspended);
+
+    EXPECT_CALL(*helper, resume_prompt_session()).Times(1);
+    prompt_session.resume(helper);
+
+    EXPECT_EQ(prompt_session.state(), mir_prompt_session_state_started);
+}
+
+TEST_F(PromptSession, resume_fails_to_stop_helper_when_not_started)
+{
+    ms::PromptSessionImpl prompt_session;
+
+    EXPECT_CALL(*helper, resume_prompt_session()).Times(0);
+    prompt_session.resume(helper);
+
+    EXPECT_EQ(prompt_session.state(), mir_prompt_session_state_stopped);
+}

=== modified file 'tests/unit-tests/scene/test_prompt_session_manager.cpp'
--- tests/unit-tests/scene/test_prompt_session_manager.cpp	2014-12-08 04:03:47 +0000
+++ tests/unit-tests/scene/test_prompt_session_manager.cpp	2014-12-17 12:06:59 +0000
@@ -128,10 +128,20 @@
     auto const prompt_session = session_manager.start_prompt_session_for(helper, parameters);
 
     EXPECT_CALL(prompt_session_listener, stopping(Eq(prompt_session))).Times(1);
+
     session_manager.stop_prompt_session(prompt_session);
-
-    // Need to verify explicitly as we see unmatched callbacks during teardown of fixture
-    Mock::VerifyAndClearExpectations(&prompt_session_listener);
+}
+
+TEST_F(PromptSessionManager, notifies_provider_of_suspend_and_resume)
+{
+    InSequence seq;
+    EXPECT_CALL(prompt_session_listener, suspending(_)).Times(1);
+
+    session_manager.suspend_prompt_session(prompt_session);
+
+    EXPECT_CALL(prompt_session_listener, resuming(Eq(prompt_session))).Times(1);
+
+    session_manager.resume_prompt_session(prompt_session);
 }
 
 TEST_F(PromptSessionManager, sets_helper_for)

