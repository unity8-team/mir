option cc_generic_services = true;

package mir.protobuf;

message ConnectParameters {
  required string application_name = 1;
  optional int32 lightdm_id  = 2;
}

message SurfaceParameters {
  required int32 width = 1;
  required int32 height = 2;
  required int32 pixel_format = 3;
  required int32 buffer_usage = 4;
  optional string surface_name = 5;
}

message SurfaceId {
  required int32 value = 1;
};

message LightdmId {
  required int32 value = 1;
};

// Outside of the IPC code no-one should care as this is all wrapped up. 
// But for the following result messages we either populate the "real"
// attributes or, in the case of an error, the error attribute. So the
// attributes are all "optional" (or "repeated").
message Buffer {
  optional int32 buffer_id = 1;
  repeated sint32 fd = 2;
  repeated int32  data = 3;
  optional int32  fds_on_side_channel = 4;
  optional int32 stride = 5;

  optional string error = 127;
}

// Outside of the IPC code no-one should care as this is all wrapped up. 
// But for the following result messages we either populate the "real"
// attributes or, in the case of an error, the error attribute. So the
// attributes are all "optional" (or "repeated").
message Platform {
  repeated sint32 fd = 1;
  repeated int32  data = 2;
  optional int32  fds_on_side_channel = 3;

  optional string error = 127;
}

// Outside of the IPC code no-one should care as this is all wrapped up. 
// But for the following result messages we either populate the "real"
// attributes or, in the case of an error, the error attribute. So the
// attributes are all "optional" (or "repeated").
message DisplayInfo {
  required int32 width = 1;
  required int32 height = 2;
  repeated uint32 supported_pixel_format = 3;
}

// Outside of the IPC code no-one should care as this is all wrapped up.
// But for the following result messages we either populate the "real"
// attributes or, in the case of an error, the error attribute. So the
// attributes are all "optional" (or "repeated").
message Connection {
  optional Platform platform = 1;
  optional DisplayInfo display_info = 2;

  optional string error = 127;
}

// Outside of the IPC code no-one should care as this is all wrapped up.
// But for the following result messages we either populate the "real"
// attributes or, in the case of an error, the error attribute. So the
// attributes are all "optional" (or "repeated").
message Surface {
  optional SurfaceId id = 1;
  optional int32 width = 2;
  optional int32 height = 3;
  optional int32 pixel_format = 4;
  optional int32 buffer_usage = 5;
  optional Buffer buffer = 6;
  
  repeated sint32 fd = 7;
  optional int32 fds_on_side_channel = 8;

  optional string error = 127;
}

// Outside of the IPC code no-one should care as this is all wrapped up. 
// But for the following result messages we either populate the "real"
// attributes or, in the case of an error, the error attribute. So the
// attributes are all "optional" (or "repeated").
message DRMMagic {
  optional uint32 magic = 1;
  optional string error = 127;
}

// Outside of the IPC code no-one should care as this is all wrapped up.
// But for the following result messages we either populate the "real"
// attributes or, in the case of an error, the error attribute. So the
// attributes are all "optional" (or "repeated").
message DRMAuthMagicStatus {
  optional int32 status_code = 1;
  optional string error = 127;
}

// Outside of the IPC code no-one should care as this is all wrapped up.
// But for the following result messages we either populate the "real"
// attributes or, in the case of an error, the error attribute. So the
// attributes are all "optional" (or "repeated").
message Void {
  optional string error = 127;
}

service DisplayServer {
  // Platform independent requests
  rpc connect(ConnectParameters) returns (Connection);
  rpc disconnect(Void) returns (Void);
  rpc create_surface(SurfaceParameters) returns (Surface);
  rpc next_buffer(SurfaceId) returns (Buffer);
  rpc release_surface(SurfaceId) returns (Void);
  rpc select_focus_by_lightdm_id(LightdmId) returns (Void);

  // Platform specific requests
  rpc drm_auth_magic(DRMMagic) returns (DRMAuthMagicStatus);

  rpc test_file_descriptors(Void) returns (Buffer);
}

