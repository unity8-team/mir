/*
 * Copyright Â© 2008 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Author:
 *    Zou Nan hai <nanhai.zou@intel.com>
 *
 */

/* intra coded block
 * should fix 8 DWORD issue later
 */
mov (8) g3.0<1>UD g1.0<8,8,1>UD {align1};
mov(1) g1.8<1>UD 0x0070007UD  { align1 };
mov (2) g1.0<1>UD g3.0<2,2,1>UD {align1};

add (1) g2.4<1>UD g3.8<1,1,1>UD 0UD{align1};
send (16) 0 g4.0<1>UD g2<8,8,1>UW read(3, 0, 2, 0) mlen 1 rlen 1 { align1 };
add (1) g2.4<1>UD g2.4<1,1,1>UD 32UD {align1};
send (16) 0 g5.0<1>UD g2<8,8,1>UW read(3, 0, 2, 0) mlen 1 rlen 1 { align1 };
add (1) g2.4<1>UD g2.4<1,1,1>UD 32UD {align1};
send (16) 0 g6.0<1>UD g2<8,8,1>UW read(3, 0, 2, 0) mlen 1 rlen 1 { align1 };
add (1) g2.4<1>UD g2.4<1,1,1>UD 32UD {align1};
send (16) 0 g7.0<1>UD g2<8,8,1>UW read(3, 0, 2, 0) mlen 1 rlen 1 { align1 };


mov.sat (16) g4.0<2>UB g4.0<16,16,1>W {align1};
mov.sat (16) g5.0<2>UB g5.0<16,16,1>W {align1};
mov.sat (16) g6.0<2>UB g6.0<16,16,1>W {align1};
mov.sat (16) g7.0<2>UB g7.0<16,16,1>W {align1};
mov (16) g8.0<1>UB g4.0<16,16,2>UB {align1};
mov (16) g8.16<1>UB g5.0<16,16,2>UB{align1};
mov (16) g9.0<1>UB g6.0<16,16,2>UB {align1};
mov (16) g9.16<1>UB g7.0<16,16,2>UB {align1};
mov (16) m1<1>UD g8.0<8,8,1>UD {align1 compr};

send (16) 0 acc0<1>UW g1<8,8,1>UW write(0, 0, 2, 0) mlen 3 rlen 0 { align1 };

add (1) g2.4<1>UD g3.8<1,1,1>UD 128UD{align1};
send (16) 0 g4.0<1>UD g2<8,8,1>UW read(3, 0, 2, 0) mlen 1 rlen 1 { align1 };
add (1) g2.4<1>UD g2.4<1,1,1>UD 32UD {align1};
send (16) 0 g5.0<1>UD g2<8,8,1>UW read(3, 0, 2, 0) mlen 1 rlen 1 { align1 };
add (1) g2.4<1>UD g2.4<1,1,1>UD 32UD {align1};
send (16) 0 g6.0<1>UD g2<8,8,1>UW read(3, 0, 2, 0) mlen 1 rlen 1 { align1 };
add (1) g2.4<1>UD g2.4<1,1,1>UD 32UD {align1};
send (16) 0 g7.0<1>UD g2<8,8,1>UW read(3, 0, 2, 0) mlen 1 rlen 1 { align1 };

mov.sat (16) g4.0<2>UB g4.0<16,16,1>W {align1};
mov.sat (16) g5.0<2>UB g5.0<16,16,1>W {align1};
mov.sat (16) g6.0<2>UB g6.0<16,16,1>W {align1};
mov.sat (16) g7.0<2>UB g7.0<16,16,1>W {align1};

mov (16) g8.0<1>UB g4.0<16,16,2>UB {align1};
mov (16) g8.16<1>UB g5.0<16,16,2>UB {align1};
mov (16) g9.0<1>UB g6.0<16,16,2>UB {align1 };
mov (16) g9.16<1>UB g7.0<16,16,2>UB {align1 };
mov (16) m1<1>UD g8.0<8,8,1>UD {align1 compr};

add (1) g1.0<1>UD g3.0<1,1,1>UD 0x8UD {align1};
mov (1) g1.4<1>UD g3.4<1,1,1>UD {align1};
send (16) 0 acc0<1>UW g1<8,8,1>UW write(0, 0, 2, 0) mlen 3 rlen 0 { align1 };

add (1) g2.4<1>UD g3.8<1,1,1>UD 256UD{align1};
send (16) 0 g4.0<1>UD g2<8,8,1>UW read(3, 0, 2, 0) mlen 1 rlen 1 { align1 };
add (1) g2.4<1>UD g2.4<1,1,1>UD 32UD {align1};
send (16) 0 g5.0<1>UD g2<8,8,1>UW read(3, 0, 2, 0) mlen 1 rlen 1 { align1 };
add (1) g2.4<1>UD g2.4<1,1,1>UD 32UD {align1};
send (16) 0 g6.0<1>UD g2<8,8,1>UW read(3, 0, 2, 0) mlen 1 rlen 1 { align1 };
add (1) g2.4<1>UD g2.4<1,1,1>UD 32UD {align1};
send (16) 0 g7.0<1>UD g2<8,8,1>UW read(3, 0, 2, 0) mlen 1 rlen 1 { align1 };

mov.sat (16) g4.0<2>UB g4.0<16,16,1>W {align1};
mov.sat (16) g5.0<2>UB g5.0<16,16,1>W {align1};
mov.sat (16) g6.0<2>UB g6.0<16,16,1>W {align1};
mov.sat (16) g7.0<2>UB g7.0<16,16,1>W {align1};

mov (16) g8.0<1>UB g4.0<16,16,2>UB {align1 };
mov (16) g8.16<1>UB g5.0<16,16,2>UB {align1};
mov (16) g9.0<1>UB g6.0<16,16,2>UB {align1 };
mov (16) g9.16<1>UB g7.0<16,16,2>UB {align1 };
mov (16) m1<1>UD g8.0<8,8,1>UD {align1 compr};

add (1) g1.4<1>UD g3.4<1,1,1>UD 0x8UD {align1};
mov (1) g1.0<1>UD g3.0<1,1,1>UD {align1};
send (16) 0 acc0<1>UW g1<8,8,1>UW write(0, 0, 2, 0) mlen 3 rlen 0 { align1 };

add (1) g2.4<1>UD g3.8<1,1,1>UD 384UD{align1};
send (16) 0 g4.0<1>UD g2<8,8,1>UW read(3, 0, 2, 0) mlen 1 rlen 1 { align1 };
add (1) g2.4<1>UD g2.4<1,1,1>UD 32UD {align1};
send (16) 0 g5.0<1>UD g2<8,8,1>UW read(3, 0, 2, 0) mlen 1 rlen 1 { align1 };
add (1) g2.4<1>UD g2.4<1,1,1>UD 32UD {align1};
send (16) 0 g6.0<1>UD g2<8,8,1>UW read(3, 0, 2, 0) mlen 1 rlen 1 { align1 };
add (1) g2.4<1>UD g2.4<1,1,1>UD 32UD {align1};
send (16) 0 g7.0<1>UD g2<8,8,1>UW read(3, 0, 2, 0) mlen 1 rlen 1 { align1 };

mov.sat (16) g4.0<2>UB g4.0<16,16,1>W {align1};
mov.sat (16) g5.0<2>UB g5.0<16,16,1>W {align1};
mov.sat (16) g6.0<2>UB g6.0<16,16,1>W {align1};
mov.sat (16) g7.0<2>UB g7.0<16,16,1>W {align1};
mov (16) g8.0<1>UB g4.0<16,16,2>UB {align1 };
mov (16) g8.16<1>UB g5.0<16,16,2>UB {align1};
mov (16) g9.0<1>UB g6.0<16,16,2>UB {align1 };
mov (16) g9.16<1>UB g7.0<16,16,2>UB {align1 };
mov (16) m1<1>UD g8.0<8,8,1>UD {align1 compr};

add (1) g1.0<1>UD g3.0<1,1,1>UD 8D {align1};
add (1) g1.4<1>UD g3.4<1,1,1>UD 8D {align1};
send (16) 0 acc0<1>UW g1<8,8,1>UW write(0, 0, 2, 0) mlen 3 rlen 0 { align1 };

add (1) g2.4<1>UD g3.8<1,1,1>UD 512UD{align1};
send (16) 0 g4.0<1>UD g2<8,8,1>UW read(3, 0, 2, 0) mlen 1 rlen 1 { align1 };
add (1) g2.4<1>UD g2.4<1,1,1>UD 32UD {align1};
send (16) 0 g5.0<1>UD g2<8,8,1>UW read(3, 0, 2, 0) mlen 1 rlen 1 { align1 };
add (1) g2.4<1>UD g2.4<1,1,1>UD 32UD {align1};
send (16) 0 g6.0<1>UD g2<8,8,1>UW read(3, 0, 2, 0) mlen 1 rlen 1 { align1 };
add (1) g2.4<1>UD g2.4<1,1,1>UD 32UD {align1};
send (16) 0 g7.0<1>UD g2<8,8,1>UW read(3, 0, 2, 0) mlen 1 rlen 1 { align1 };

mov.sat (16) g4.0<2>UB g4.0<16,16,1>W {align1};
mov.sat (16) g5.0<2>UB g5.0<16,16,1>W {align1};
mov.sat (16) g6.0<2>UB g6.0<16,16,1>W {align1};
mov.sat (16) g7.0<2>UB g7.0<16,16,1>W {align1};
mov (16) g8.0<1>UB g4.0<16,16,2>UB {align1 };
mov (16) g8.16<1>UB g5.0<16,16,2>UB {align1};
mov (16) g9.0<1>UB g6.0<16,16,2>UB {align1 };
mov (16) g9.16<1>UB g7.0<16,16,2>UB {align1 };
mov (16) m1<1>UD g8.0<8,8,1>UD {align1 compr};

shr (2) g1.0<1>UD g3.0<2,2,1>UD 1D {align1};
send (16) 0 acc0<1>UW g1<8,8,1>UW write(1, 0, 2, 0) mlen 3 rlen 0 { align1 };


add (1) g2.4<1>UD g3.8<1,1,1>UD 640UD{align1};
send (16) 0 g4.0<1>UD g2<8,8,1>UW read(3, 0, 2, 0) mlen 1 rlen 1 { align1 };
add (1) g2.4<1>UD g2.4<1,1,1>UD 32UD {align1};
send (16) 0 g5.0<1>UD g2<8,8,1>UW read(3, 0, 2, 0) mlen 1 rlen 1 { align1 };
add (1) g2.4<1>UD g2.4<1,1,1>UD 32UD {align1};
send (16) 0 g6.0<1>UD g2<8,8,1>UW read(3, 0, 2, 0) mlen 1 rlen 1 { align1 };
add (1) g2.4<1>UD g2.4<1,1,1>UD 32UD {align1};
send (16) 0 g7.0<1>UD g2<8,8,1>UW read(3, 0, 2, 0) mlen 1 rlen 1 { align1 };

mov.sat (16) g4.0<2>UB g4.0<16,16,1>W {align1};
mov.sat (16) g5.0<2>UB g5.0<16,16,1>W {align1};
mov.sat (16) g6.0<2>UB g6.0<16,16,1>W {align1};
mov.sat (16) g7.0<2>UB g7.0<16,16,1>W {align1};

mov (16) g8.0<1>UB g4.0<16,16,2>UB {align1 };
mov (16) g8.16<1>UB g5.0<16,16,2>UB {align1};
mov (16) g9.0<1>UB g6.0<16,16,2>UB {align1 };
mov (16) g9.16<1>UB g7.0<16,16,2>UB {align1 };
mov (16) m1<1>UD g8.0<8,8,1>UD {align1 compr};
send (16) 0 acc0<1>UW g1<8,8,1>UW write(2, 0, 2, 0) mlen 3 rlen 0 { align1 };

send (16) 0 acc0<1>UW g0<8,8,1>UW 
	thread_spawner(0, 0, 0) mlen 1 rlen 0 { align1 EOT};
